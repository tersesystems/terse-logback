<!--

    SPDX-License-Identifier: CC0-1.0

    Copyright 2018-2019 Will Sargent.

    Licensed under the CC0 Public Domain Dedication;
    You may obtain a copy of the License at

        http://creativecommons.org/publicdomain/zero/1.0/

-->
<!--
  This is an example configuration of Logback using async appenders from logstash-logback-encoder and with
  some custom configuration using Typesafe Config, so you only have to touch logback.conf in your project
  and have sensible structured logging defaults.

  THIS IS NOT INTENDED TO BE A DROP IN REPLACEMENT.  Please see the documentation at

  https://github.com/logstash/logstash-logback-encoder/blob/master/README.md

  and the links in the comments.
-->
<configuration>
    <newRule pattern="*/typesafeConfig"
             actionClass="com.tersesystems.logback.TypesafeConfigAction"/>

    <newRule pattern="*/setLoggerLevels"
             actionClass="com.tersesystems.logback.SetLoggerLevelsAction"/>

    <typesafeConfig />

    <jmxConfigurator />

    <conversionRule conversionWord="terseHighlight" converterClass="com.tersesystems.logback.TerseHighlightConverter" />

    <conversionRule conversionWord="censor" converterClass="com.tersesystems.logback.censor.CensorConverter" />

    <!--
    https://github.com/logstash/logstash-logback-encoder/blob/master/src/main/java/net/logstash/logback/stacktrace/ShortenedThrowableConverter.java#L58

    Options can be specified in the pattern in the following order:
       - maxDepthPerThrowable = "full" or "short" or an integer value
       - shortenedClassNameLength = "full" or "short" or an integer value
       - maxLength = "full" or "short" or an integer value

       %msg%n%stack{5,1024,10,rootFirst,regex1,regex2,evaluatorName}
    -->
    <conversionRule conversionWord="stack" converterClass="net.logstash.logback.stacktrace.ShortenedThrowableConverter" />

    <contextListener class="ch.qos.logback.classic.jul.LevelChangePropagator">
        <resetJUL>true</resetJUL>
    </contextListener>

    <!-- give the async appenders time to shutdown -->
    <shutdownHook class="ch.qos.logback.core.hook.DelayingShutdownHook">
        <delay>${shutdownHook.delay}</delay>
    </shutdownHook>

    <turboFilter class="ch.qos.logback.classic.turbo.MarkerFilter">
        <Name>${tracerFilter.name}</Name>
        <Marker>${tracerFilter.marker}</Marker>
        <OnMatch>ACCEPT</OnMatch>
    </turboFilter>

    <turboFilter class="com.tersesystems.logback.ExpiringDuplicateMessageFilter">
        <allowedRepetitions>${expiringDuplicateMessageFilter.allowedRepetitions}</allowedRepetitions>
        <cacheSize>${expiringDuplicateMessageFilter.cacheSize}</cacheSize>
        <expireAfterWriteSeconds>${expiringDuplicateMessageFilter.expireAfterWriteSeconds}</expireAfterWriteSeconds>
        <excludeMarkers>${expiringDuplicateMessageFilter.excludeMarkers}</excludeMarkers>
    </turboFilter>

    <include resource="terse-logback/appenders/console-appenders.xml"/>
    <include resource="terse-logback/appenders/jsonfile-appenders.xml"/>
    <include resource="terse-logback/appenders/textfile-appenders.xml"/>

    <root>
        <appender-ref ref="CONSOLE"/> <!-- very confusing if you have printlns before logger output -->
        <appender-ref ref="ASYNCJSONFILE"/>
        <appender-ref ref="ASYNCTEXTFILE"/>
    </root>

    <!-- Set the logger levels at the very end -->
    <setLoggerLevels/>
</configuration>