/*
 * SPDX-License-Identifier: CC0-1.0
 *
 * Copyright 2018-2019 Will Sargent.
 *
 * Licensed under the CC0 Public Domain Dedication;
 * You may obtain a copy of the License at
 *
 *     http://creativecommons.org/publicdomain/zero/1.0/
 */
plugins {
    // http://andresalmiray.com/an-opinionated-way-to-build-gradle-projects/
    // https://aalmiray.github.io/kordamp-gradle-plugins/#_project_structure
    // http://andresalmiray.com/gaining-insight-into-a-gradle-build/
    id 'org.kordamp.gradle.project' version '0.26.0'
    id 'org.kordamp.gradle.bintray' version '0.26.0'
    id 'com.gradle.build-scan'      version '2.2.1'
    id "org.shipkit.java"           version "2.2.5"
    //id 'org.inferred.processors'    version '2.3.0'
}

if (!project.hasProperty('bintrayUsername')) ext.bintrayUsername = ''
if (!project.hasProperty('bintrayApiKey'))   ext.bintrayApiKey = ''
ext.travis = (System.env['TRAVIS'] ?: false) as boolean
ext.publishing = (System.env['PUBLISH'] ?: false) as boolean

config {
    info {
        name          = rootProject.name
        vendor        = 'tersesystems'
        description   = 'Terse Logback'
        inceptionYear = '2018'
        tags          = ['logging', 'logback']

        links {
            website      = "https://github.com/tersesystem/${rootProject.name}"
            issueTracker = "https://github.com/tersesystem/${rootProject.name}/issues"
            scm          = "https://github.com/tersesystem/${rootProject.name}.git"
        }

        people {
            person {
                id    = 'wsargent'
                name  = 'Will Sargent'
                roles = ['developer']
            }
        }
    }

    licensing {
        enabled
        licenses {
            license {
                id = 'CC0-1.0'
            }
        }
    }

    bintray {
        enabled = false
        publications = ['shadow']
        credentials {
            // http://andresalmiray.com/gaining-insight-into-a-gradle-build/
            username = project.bintrayUsername
            password = project.bintrayApiKey
        }
        userOrg    = 'tersesystems'
        name       = rootProject.name
    }
}

allprojects {
    apply plugin: 'idea'

    repositories {
        jcenter()
    }

    tasks.withType(Sign) {
        onlyIf { 1 == 0 }
    }
}

subprojects { subproj ->
    apply plugin: 'java'
   
    if (!subproj.name.contains('example')) {
        // Allow signing with the Yubikey using gpg-agent
        if (publishing && ! travis) {
            config {
                bintray { enabled = true }
            }

            signing {
                useGpgCmd()
                sign configurations.archives
            }
        }
    }

    dependencies {
        testCompile 'org.assertj:assertj-core:3.8.0'
        testCompile "junit:junit:$junitVersion"
        testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
        testCompile "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
        testCompile "org.junit.vintage:junit-vintage-engine:$junitVintageVersion"
        //testCompile group: 'org.junit.platform', name: 'junit-platform-runner', version: '1.5.0'
    }

    config {
        info {
            description = project.project_description
        }
    }

    test {
        useJUnitPlatform()
    }
}

// Go through all the artifacts and find javadoc for it...
static List<String> javadocFromDependencies(Configuration config) {
    List<String> javadocs = []
    config.dependencies.each { dep ->
        javadocs.add(artifactToJavadoc(dep.group, dep.name, dep.version))
    }
    javadocs
}

static String jvmToJavadoc(JavaVersion jvmVersion) {
    if (jvmVersion.java8) {
        'https://docs.oracle.com/javase/8/docs/api/'
    } else if (jvmVersion.java9) {
        'https://docs.oracle.com/javase/9/docs/api/'
    }else if (jvmVersion.java10) {
        'https://docs.oracle.com/javase/10/docs/api/'
    }else if (jvmVersion.java11) {
        'https://docs.oracle.com/en/java/javase/11/docs/api/'
    } else {
        'https://docs.oracle.com/javase/8/docs/api/'
    }
}

static String artifactToJavadoc(String organization, String name, String apiVersion) {
    String slashedOrg = organization.replace('.', '/')
    "https://oss.sonatype.org/service/local/repositories/releases/archive/$slashedOrg/$name/$apiVersion/$name-$apiVersion-javadoc.jar/!/"
}
