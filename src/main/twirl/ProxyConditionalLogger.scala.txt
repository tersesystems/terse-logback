package com.tersesystems.logback.proxy;

import org.slf4j.Logger;
import org.slf4j.Marker;
import org.slf4j.event.Level;
import java.util.function.Consumer;
import java.util.function.Supplier;
import java.util.function.Predicate;

@* "sbt generateSources" autogenerates in target/sources/txt.Results *@
public class ProxyConditionalLogger extends ProxyLogger implements ConditionalLogger, Logger, LazyLogger @ob

    private final Predicate<Level> predicate;

    public ProxyConditionalLogger(Logger logger) {
        super(logger);
        if (logger instanceof ConditionalLogger) {
          this.predicate = ((ConditionalLogger) logger).getPredicate();
        } else {
          this.predicate = level -> true;
        }
    }

    public ProxyConditionalLogger(Logger logger, Predicate<Level> predicate) {
        super(logger);
        if (logger instanceof ConditionalLogger) {
          this.predicate = level -> ((ConditionalLogger) logger).getPredicate().test(level) && predicate.test(level);
        } else {
          this.predicate = predicate;
        }
    }

    public Predicate<Level> getPredicate() {
        return predicate;
    }

    @for(level <- Seq(
      Level("trace", "Trace"),
      Level("debug", "Debug"),
      Level("info", "Info"),
      Level("warn", "Warn"),
      Level("error", "Error"),
    )) {

    @Override
    public void @{level.name}(Consumer<LoggerStatement> lc) @ob
        if (is@{level.capitalizedName}Enabled() && predicate.test(Level.@{level.name.toUpperCase})) @ob
            lc.accept(new LoggerStatement.@{level.capitalizedName}(this));
        @cb
    @cb

    @Override
    public void @{level.name}(Marker marker, Consumer<LoggerStatement> lc) @ob
        if (is@{level.capitalizedName}Enabled(marker) && predicate.test(Level.@{level.name.toUpperCase})) @ob
            lc.accept(new LoggerStatement.@{level.capitalizedName}(this));
        @cb
    @cb

    @Override
    public void if@{level.capitalizedName}(Supplier<Boolean> condition, Consumer<LoggerStatement> lc) @ob
        if (is@{level.capitalizedName}Enabled() && condition.get() && predicate.test(Level.@{level.name.toUpperCase})) @ob
            lc.accept(new LoggerStatement.@{level.capitalizedName}(this));
        @cb
    @cb

    @Override
    public void if@{level.capitalizedName}(Marker marker, Supplier<Boolean> condition, Consumer<LoggerStatement> lc) @ob
        if (is@{level.capitalizedName}Enabled(marker) && condition.get() && predicate.test(Level.@{level.name.toUpperCase})) @ob
            lc.accept(new LoggerStatement.@{level.capitalizedName}(this));
        @cb
    @cb

    @Override
    public boolean is@{level.capitalizedName}Enabled() {
        return super.is@{level.capitalizedName}Enabled() && predicate.test(Level.@{level.name.toUpperCase});
    }

    @Override
    public void @{level.name}(String msg) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
          super.@{level.name}(msg);
        }
    }

    @Override
    public void @{level.name}(String format, Object arg) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
          super.@{level.name}(format, arg);
        }
    }

    @Override
    public void @{level.name}(String format, Object arg1, Object arg2) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
          super.@{level.name}(format, arg1, arg2);
        }
    }

    @Override
    public void @{level.name}(String format, Object... arguments) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
          super.@{level.name}(format, arguments);
        }
    }

    @Override
    public void @{level.name}(String msg, Throwable t) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(msg, t);
        }
    }

    @Override
    public boolean is@{level.capitalizedName}Enabled(Marker marker) {
        return super.is@{level.capitalizedName}Enabled(marker) && predicate.test(Level.@{level.name.toUpperCase});
    }

    @Override
    public void @{level.name}(Marker marker, String msg) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(marker, msg);
        }
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object arg) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(marker, format, arg);
        }
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object arg1, Object arg2) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(marker, format, arg1, arg2);
        }
    }

    @Override
    public void @{level.name}(Marker marker, String format, Object... argArray) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(marker, format, argArray);
        }
    }

    @Override
    public void @{level.name}(Marker marker, String msg, Throwable t) {
        if (predicate.test(Level.@{level.name.toUpperCase})) {
            super.@{level.name}(marker, msg, t);
        }
    }
    }
@cb